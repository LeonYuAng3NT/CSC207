// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package test;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;

import a2a.foundation.Directory;
import a2a.foundation.FileSystem;

import a2a.operator.DirectoryNavigator;

/**
 * A directory Navigator, use to test if the methods are working as expected.
 * 
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 * @author Yu Wang
 */
public class DirectoryNavigatorTest {

  private FileSystem fileSystem;
  private DirectoryNavigator dirNavigator;

  /**
   * Set up.
   */
  @Before
  public void setUp() {
    fileSystem = new FileSystem();

    // Get root
    Directory root = fileSystem.getRoot();
    ArrayList<Object> contentOfRoot = (ArrayList<Object>) root.getContent();

    // Create new directory
    Directory directoryA = new Directory("A", "/A", root);
    Directory directoryB = new Directory("B", "/B", root);
    contentOfRoot.add(directoryA);
    contentOfRoot.add(directoryB);
    Directory directoryC =
        new Directory("C", "/A/C", ((Directory) root.getContent().get(0)));
    Directory directoryD =
        new Directory("D", "/B/D", ((Directory) root.getContent().get(1)));
    ((Directory) contentOfRoot.get(0)).getContent().add(directoryC);
    ((Directory) contentOfRoot.get(1)).getContent().add(directoryD);

    // Update the root content
    root.setContent(contentOfRoot);

    // Update the root to file system
  }

  /**
   * Test if the instance can be successfully created.
   */
  @Test
  public void testDirectoryNavigator() throws Exception {

    try {
      dirNavigator = new DirectoryNavigator();
    } catch (Exception e) {
      fail("Failed to create an instance of directory navigator.");
    }
  }

  /**
   * Test if the input command for Directory Navigator is valid or not.
   */
  @Test
  public void testIsValid() {


  }

  /**
   * Test if execute method works as expected.
   */
  @Test
  public void testExecute() {

    dirNavigator = new DirectoryNavigator();
    dirNavigator.execute();
    assertTrue(((Directory) fileSystem.getCurrDir().getContent().get(0))
        .getName().equals("C"));
   // dirNavigator.isValid(" cd ..");
    dirNavigator.execute();
    assertTrue(fileSystem.getCurrDir().getName().equals("/"));
    //dirNavigator.isValid("cd B ");
    dirNavigator.execute();
    assertTrue(fileSystem.getCurrDir().getName().equals("B"));
    //dirNavigator.isValid("cd /A/C ");
    dirNavigator.execute();
    assertTrue(fileSystem.getCurrDir().getName().equals("C"));
    //dirNavigator.isValid("cd /B/D");
    dirNavigator.execute();
    assertTrue(fileSystem.getCurrDir().getName().equals("D"));
    //dirNavigator.isValid("cd ..");
    dirNavigator.execute();
    assertTrue(fileSystem.getCurrDir().getName().equals("B"));
    //dirNavigator.isValid("cd . ");
    dirNavigator.execute();
    assertTrue(fileSystem.getCurrDir().getName().equals("B"));
    //dirNavigator.isValid("cd .. ");
    dirNavigator.execute();
    assertTrue(fileSystem.getCurrDir().getName().equals("/"));
  }
}


