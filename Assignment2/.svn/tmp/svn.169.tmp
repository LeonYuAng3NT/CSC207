// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package test;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;

import org.junit.Test;

import a2a.exceptions.ArgumentDeclareException;
import a2a.exceptions.InvalidTargetNameException;
import a2a.exceptions.NameConflictException;
import a2a.exceptions.PathDoesNotExistException;
import a2a.exceptions.QueriedCommandNotExistException;
import a2a.foundation.Directory;
import a2a.foundation.FileSystem;
import a2a.operator.ContentViewer;
import a2a.operator.FileReader;

/**
 * A Content Viewer test,uses to tests if the methods in Content Viewer are
 * working as expected.
 * 
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 * @author Yu Wang
 */
public class ContentViewerTest {
  private ContentViewer viewer;

  @Test
  public void testContentViewer() {
    try {

    } catch (Exception e) {
      fail("error msg");
    }
  }

  /**
   * Test if the input command for Content Viewer is valid or not.
   * @throws InvalidTargetNameException 
   * @throws QueriedCommandNotExistException 
   * @throws NameConflictException 
   * @throws ArgumentDeclareException 
   * @throws PathDoesNotExistException 
   */
  @Test
  public void testsetUp() throws PathDoesNotExistException, 
  ArgumentDeclareException, NameConflictException, 
  QueriedCommandNotExistException, InvalidTargetNameException {
    FileSystem fileSystem = new FileSystem();
    // Get root
    Directory root = fileSystem.getRoot();
    ArrayList<Object> contentOfRoot = (ArrayList<Object>) root.getContent();

    // Create new directory
    Directory directoryA = new Directory("A", "/A", fileSystem.getRoot());
    Directory directoryB = new Directory("B", "/B", fileSystem.getRoot());
    Directory directoryC = new Directory("C", "/C", fileSystem.getRoot());
    contentOfRoot.add(directoryA);
    contentOfRoot.add(directoryB);
    contentOfRoot.add(directoryC); 
    directoryA.getContent()
        .add(new Directory("file1", "/A/file1", 
            ((Directory) root.getContent().get(0))));
    directoryA.getContent()
        .add(new Directory("file2", "/A/file2", 
            (Directory) root.getContent().get(0)));
    directoryC.getContent()
    .add(new Directory("file3", "/C/file3", 
        (Directory) root.getContent().get(0)));

    // Update the root content
    root.setContent(contentOfRoot);
    // Update the root to file system
    viewer = new ContentViewer();
    viewer.setUp(new String[] {"ls", "A"}, fileSystem);
    viewer.setUp(new String[] {"ls",  ""  }, fileSystem);
    viewer.setUp(new String[] {"ls", "/A/"}, fileSystem);
    viewer.setUp(new String[] {"ls", "/A/B/"}, fileSystem);
  }

  /**
   * Test if the execute method for Content Viewer is working as expected.
   */
  @Test
  public void testExecute() { 
    FileSystem fileSystem = new FileSystem();
    Directory root = fileSystem.getRoot();
    ArrayList<Object> contentOfRoot = (ArrayList<Object>) root.getContent();
    Directory directoryA = new Directory("A", "/A", fileSystem.getRoot());
    Directory directoryB = new Directory("B", "/B", fileSystem.getRoot());
    Directory directoryC = new Directory("C", "/C", fileSystem.getRoot());
    contentOfRoot.add(directoryA);
    contentOfRoot.add(directoryB);
    contentOfRoot.add(directoryC); 
    directoryA.getContent()
        .add(new Directory("file1", "/A/file1", 
            ((Directory) root.getContent().get(0))));
    directoryA.getContent()
        .add(new Directory("file2", "/A/file2", 
            (Directory) root.getContent().get(0)));
    directoryC.getContent()
    .add(new Directory("file3", "/C/file3", 
        (Directory) root.getContent().get(0)));
//    viewer = new ContentViewer();
//  viewer.isValid("ls ..");
//    viewer.isValid("ls A/file1");
//   viewer.isValid("ls B/");
//    viewer.isValid("ls C/file3   ");
  
    ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    System.setOut(new PrintStream(outContent));

    String expectedOutput =
        "/ : \nA\nB\nC\n\nfile1 : \n\nB : \n\nfile3 : \n\n" ;
    assertEquals(expectedOutput,outContent.toString());

  }

}
