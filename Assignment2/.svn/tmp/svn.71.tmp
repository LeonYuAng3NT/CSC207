// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: YI JIAN WANG
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package test;

import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;

import org.junit.Test;

import a2a.foundation.Directory;
import a2a.foundation.FileSystem;
import a2a.operator.WorkingPathPrinter;

/**
 * A working path printer test, use to test if the methods in the class are
 * working as expected.
 */
public class WorkingPathPrinterTest {
  private FileSystem database;
  private WorkingPathPrinter printer;
  
  @Test
  public void testWorkingPathPrinter() throws Exception{
     
     printer = new WorkingPathPrinter(database);
  }

  /**
   * Test if the input command for WorkingPathPrinter is valid or not.
   */
  @Test
  public void testIsValid() {
    FileSystem fileSystem = new FileSystem();

    // Get root
    Directory root = fileSystem.getRoot();
    ArrayList<Object> contentOfRoot = root.getContent();

    // Create new directory
    Directory directoryAbc = new Directory("abc", "/abc", fileSystem.getRoot());
    contentOfRoot.add(directoryAbc);

    // Update the root content
    root.setContent(contentOfRoot);

    // Update the root to file system
    fileSystem.setRoot(root);

    WorkingPathPrinter printer = new WorkingPathPrinter(fileSystem);

    assertTrue(printer.isValid("pwd"));
    assertTrue(printer.isValid("     pwd"));
    assertTrue(printer.isValid("pwd       "));
    assertFalse(printer.isValid("pwd abc"));

  }

  /**
   * Test if the Execute method is working as expected.
   */
  @Test
  public void testExecute() { 
    ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    System.setOut(new PrintStream(outContent));
    database = new FileSystem();
    printer = new  WorkingPathPrinter(database);
    printer.isValid("pwd");
    printer.execute();
    Directory directoryAbc = new Directory("abc", "/abc", database.getRoot());
    database.getCurrDir().getContent().add(directoryAbc);
    database.setCurrDir(directoryAbc);
    printer = new  WorkingPathPrinter(database);
    printer.isValid(" pwd");
    printer.execute();
    Directory directoryAdc = new Directory("adc", "/abc/adc", 
          database.getRoot());
    database.getCurrDir().getContent().add(directoryAdc);
    database.setCurrDir(directoryAdc);
    printer = new WorkingPathPrinter(database);
    printer.isValid("pwd");
    printer.execute();
    
   
 
    String expectedOutput = "/\n"+"/abc\n"+ "/abc/adc\n";
    assertEquals( expectedOutput, outContent.toString());

    
  }

}
