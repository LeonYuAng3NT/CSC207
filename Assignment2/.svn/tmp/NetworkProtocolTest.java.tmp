// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package test;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import a2a.foundation.FileSystem;
import a2a.operator.NetworkProtocol;
import a2a.operator.PathNavigator;

/**
 * A network protocol test, uses to test if the methods are working as expected.
 * 
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 */
public class NetworkProtocolTest {

  private FileSystem fileSystem;
  private String[] passed;
  private String[] failed;
  private String[] command;

  /**
   * Set up NetworkProtocol test.
   */
  @Before
  public void setUp() {
    fileSystem = new FileSystem();
    passed = new String[] {};
    failed = new String[] {};
    command = new String[] {"", "",""};

  }



  /**
   * Test if the instance can be successfully created.
   */
  @Test
  public void testNetworkProtocol() {
    try {
      new PathNavigator();
    } catch (Exception e) {
      fail("Failed to create an instance of network protocol.");
    }
  }

  /**
   * Test if the method successfully set up or throw exception in suitable
   * cases.
   * 
   * @throws Exception
   */
  @Test
  public void testSetUp() throws Exception {

    try {
      NetworkProtocol networkProtocol = new NetworkProtocol();
<<<<<<< .mine
        networkProtocol.setUp(command[0], fileSystem);
=======
      for (String command : passed) {
        networkProtocol.setUp(command, fileSystem);
      }
>>>>>>> .r795

    } catch (Exception e) {
      fail("Unhandled exception have been thrown.");
    }

    // Test cases that should be failed
    try {
      NetworkProtocol networkProtocol = new NetworkProtocol();
<<<<<<< .mine
      
        networkProtocol.setUp(command[1], fileSystem);

     // fail("Exception should be thrown.");
=======
      for (String command : failed) {
        networkProtocol.setUp(command, fileSystem);
      }
      fail("Exception should be thrown.");
>>>>>>> .r795
    } catch (Exception e) {
      // Empty catch statement
    }
  }

  /**
   * Test if the execute method for NetworkProtocol is working as expected.
   * 
   * @throws Exception
   */
  @Test
  public void testExecute() throws Exception {

  }
}
