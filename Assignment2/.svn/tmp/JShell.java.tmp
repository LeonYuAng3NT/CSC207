// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian WANG
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package driver;

import a2a.foundation.FileSystem;
import a2a.foundation.InputHistory;
import a2a.operator.Command;

import java.util.Arrays;
import java.util.Hashtable;
import java.util.Scanner;

/**
 * A JShell, it uses to receive user command and allocate tasks to different
 * part of the system based on user command.
 */
public class JShell {

  /**
   * This is a helper of JShell, it uses to get the class name.
   *
   * @param userInput The text entered by user
   * @return The name of the relative class of the JShell
   */
  private String getClassName(String userInput) {

    Hashtable<String, String> cmdNames = new Hashtable<>();

    cmdNames.put("cd", "a2a.operator.DirectoryNavigator");
    cmdNames.put("history", "a2a.operator.HistoryViewer");
    cmdNames.put("cat", "a2a.operator.FileReader");
    cmdNames.put("echo", "a2a.operator.FileEditor");
    cmdNames.put("mkdir", "a2a.operator.DirectoryCreator");
    cmdNames.put("ls", "a2a.operator.ContentViewer");
    cmdNames.put("pwd", "a2a.operator.WorkingPathPrinter");
    cmdNames.put("pushd", "a2a.operator.DirectoryStackOperator");
    cmdNames.put("popd", "a2a.operator.DirectoryStackOperator");
    cmdNames.put("man", "a2a.operator.CommandManual");

<<<<<<< .mine
  }

  /**
   * An user action of execute command: pwd
   *
   * @param fileSystem The file system that the JShell is using
   * @param userInput  The command that user input
   */
  private void actionPwd(FileSystem fileSystem, String userInput) {

    InputCommandChecker commandChecker = new InputCommandChecker(userInput);

    if (commandChecker.isValid()) {
      WorkingPathPrinter pathPrinter = new WorkingPathPrinter(fileSystem);
      pathPrinter.printfunction();

    } else {
      System.out.println("Invalid command, please try again");
    }
  }

  /**
   * An user action of execute command: cat
   *
   * @param fileSystem The file system that a JShell is using
   * @param userInput  The command that user input
   */
  private void actionCat(FileSystem fileSystem, String userInput) {

    InputCommandChecker commandChecker = new InputCommandChecker(userInput);

    if (commandChecker.isValid()) {
      // Debugging
      System.out.println("Ok!");
    } else {
      System.out.println("Invalid command, please try again");
    }

  }

  /**
   * An user action of execute command: echo
   *
   * @param fileSystem The file system that a JShell is using
   * @param userInput  The command that user input
   */
  private void actionEcho(FileSystem fileSystem, String userInput) {

    InputCommandChecker commandChecker = new InputCommandChecker(userInput);

    if (commandChecker.isValid()) {
      // Debugging
      System.out.println("Ok!");
    } else {
      System.out.println("Invalid command, please try again");
    }

  }

  /**
   * An user action of execute command: man
   *
   * @param fileSystem The file system that a JShell is using
   * @param userInput  The command that user input
   */
  private void actionMan(FileSystem fileSystem, String userInput) {

    InputCommandChecker commandChecker = new InputCommandChecker(userInput);
    if (commandChecker.isValid()) {
      String commandName = userInput.split("\\s+")[1];
      CommandManual cmdManual = new CommandManual();
      cmdManual.inquiry(commandName);
    } else {
      System.out.println("Invalid command, please try again");
    }

  }

  /**
   * An user action of execute command: history
   *
   * @param inputHistory The input history uses to record input history
   * @param userInput    The command that user input
   */
  private void actionHistory(InputHistory inputHistory, String userInput) {

    InputCommandChecker commandChecker = new InputCommandChecker(userInput);

    if (commandChecker.isValid()) {
      String[] command = userInput.split("\\s+");
      HistoryViewer historyViewer = new HistoryViewer(inputHistory);

      // display all of the input history
      if (command.length == 1) {
        historyViewer.function();

        // display specified number of recent input history
      } else if (command.length == 2) {
        historyViewer.PrintHistory(command[1]);
      }
    } else {
      System.out.println("Invalid command, please try again");
    }
=======
    return cmdNames.get(userInput.trim().split("\\s+")[0]);
>>>>>>> .r170
  }

  /**
   * JShell application entry point.
   *
   * @param args The array of command-line arguments passed to this method
   */
  public static void main(String[] args) {

    JShell js = new JShell();
    Scanner in = new Scanner(System.in);
    FileSystem mainSystem = new FileSystem();
    InputHistory iHistory = mainSystem.getHistory();

    boolean programIsRunning = true;
    do {
      // print out the current path, record every user input command
      System.out.printf("%s# ", mainSystem.getCurrDir().getAddress());
      String userInput = in.nextLine();
      iHistory.record(userInput);
      mainSystem.setHistory(iHistory);

      if (userInput.equals("exit")) {
        programIsRunning = false;
      } else if (!userInput.trim().equals("")) {

        try {
          String commandName = js.getClassName(userInput);
          Command cmd = (Command) Class.forName(commandName).newInstance();

          // Execute the command, if the command is valid
          if (cmd.isValid(userInput)) {
            cmd.execute(mainSystem);
          } else {
            System.out.println("Invalid command, please try again");
          }
        } catch (Exception e) {
          System.out.println("Invalid command, please try again");
        }
      }
    } while (programIsRunning);
  }
}
