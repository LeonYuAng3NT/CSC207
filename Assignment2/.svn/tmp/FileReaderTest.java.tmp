// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package test;

import static org.junit.Assert.*;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import a2a.foundation.File;
import a2a.exceptions.ArgumentDeclareException;
import a2a.exceptions.InvalidTargetNameException;
import a2a.exceptions.NameConflictException;
import a2a.exceptions.PathDoesNotExistException;
import a2a.foundation.*;
import a2a.operator.FileReader;

/**
 * A file reader test, use to test if the methods in the FileReader are working
 * as expected.
 * 
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 */
public class FileReaderTest {
  private FileSystem fileSystem;
  private FileReader reader;

  private String[] passed;
  private String[] failed;

  /**
   * Set up the FileReader test.
   */
  @Before
  public void setUp() {
    fileSystem = new FileSystem();
    // Get root
    Directory root = fileSystem.getRoot();
<<<<<<< .mine
    ArrayList<Object> contentOfRoot = (ArrayList<Object>) root.getContent();
=======
    List<Object> contentOfRoot = root.getContent();
>>>>>>> .r795

    // Create new directory
    Directory directoryAbc = new Directory("abc", "/abc", fileSystem.getRoot());
<<<<<<< .mine
    File file1 = new File("GameofThrones", "Clash of Kings","/");
    File file2 = new File("ToKillAMockingBird", "Very good literature", "/");
=======
    File file1 = new File("GameofThrones", "Clash of Kings", "myaddress");
    File file2 =
        new File("ToKillAMockingBird", "Very good literature", "myaddress2");
>>>>>>> .r795
    contentOfRoot.add(directoryAbc);
    contentOfRoot.add(file1);
    contentOfRoot.add(file2);

    // Update the root content
    root.setContent(contentOfRoot);

<<<<<<< .mine
    // Update the root to file system
=======
    this.failed = new String[] {"cat abc", "   cat GameofThro"};
    this.passed = new String[] {"cat ToKillAMockingBird",
        "cat GameofThrones ToKillAMockingBird", "cat",
        "cat ToKillAMockingBird"};



>>>>>>> .r795
  }

  /**
   * Test if the instance can be created successfully.
   */
  @Test
  public void testFileReader() {
    try {
      reader = new FileReader();

    } catch (Exception e) {
      fail("Failed to create an instance of FileReader");
    }
  }

  /**
   * Test if the method successfully set up or throw exception in suitable
   * cases.
   * @throws Exception 
   */
  @Test
<<<<<<< .mine
  public void testsetUp() throws Exception {
 try{
    reader = new FileReader();
    reader.setUp("cat abc", fileSystem);
    reader.setUp("  cat GameofThro", fileSystem);
    reader.setUp("cat ToKillAMockingBird", fileSystem);
    reader.setUp("cat GameofThrones ToKillAMockingBird", fileSystem);
    reader.setUp("cat",fileSystem);
    reader.setUp("cat ToKillAMockingBird",fileSystem);
  }catch(ArgumentDeclareException e){
    fail("Argument Declaration is accidently thrown");
=======
  public void testSetUp() {

    // Test cases that should be passed
    try {
      for (String command : passed) {
        reader.setUp(command, fileSystem);
      }
    } catch (Exception e) {
      fail("Failed to set up the CommandManual.");
    }

    // Test cases that should be failed
    try {
      for (String command : failed) {
        reader.setUp(command, fileSystem);
      }
      fail("Case which should be failed is accidentally passed.");
    } catch (Exception e) {
      // Empty catch statement
    }
>>>>>>> .r795
  }
 catch(NameConflictException e){
   fail("Name conlict is accidently thrown");
 }catch(PathDoesNotExistException e){
   fail("Path Does not Exist is accidently thrown");
 }catch(InvalidTargetNameException e){
   fail("Invalid Name is accidently thrown");
   }
 }
  /**
   * Test if the execute method is working as expected.
   */
  @Test
  public void testExecute() {
<<<<<<< .mine
 
    // Don't have to test cases when user executes
    // invalid input command because testIsValid covers it

    ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    System.setOut(new PrintStream(outContent));

    String expectedOutput = "Clash of Kings\n"
        + "Very good literature\n\n\n\n" +   "Very good literature\n"
        + "Clash of Kings\n\n\n\n"
        + "Clash of Kings\n"
        + "Very good literature\n\n\n\n"
        + "Very good literature\n" 
        + "Very good literature\n\n\n\n" + "Very good literature\n";
=======
    // reader = new FileReader(fileSystem);
    // reader.isValid("cat GameofThrones ToKillAMockingBird");
    // reader.isValid(" cat GameofThrones ToKillAMockingBird");
    // reader.isValid("cat ToKillAMockingBird");
    // // Don't have to test cases when user executes
    // // invalid input command because testIsValid covers it
    //
    // ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    // System.setOut(new PrintStream(outContent));
    // this.fileSystem = reader.execute();
    //
    // String expectedOutput = "Clash of Kings\n"
    // + "Very good literature\n\n\n\n" + "Very good literature\n"
    // + "Clash of Kings\n\n\n\n"
    // + "Clash of Kings\n"
    // + "Very good literature\n\n\n\n"
    // + "Very good literature\n"
    // + "Very good literature\n\n\n\n" + "Very good literature\n";
    // assertEquals(outContent.toString(), expectedOutput);
>>>>>>> .r795

  }


}
