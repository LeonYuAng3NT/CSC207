// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package test;

import a2a.foundation.FileSystem;
import a2a.foundation.InputHistory;
import a2a.operator.CommandManual;
import a2a.operator.HistoryViewer;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.Assert.assertEquals;

/**
 * A history viewer test, use to test if the methods are working as expected.
 * 
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 * @author Yu Wang
 */
public class HistoryViewerTest {

  private FileSystem fileSystem;
  // The cases that should be passed
  private String[][] passed;

  // The cases that should be failed
  private String[][] failed;

  /**
   * Set up the HistoryViewer test.
   */
  @Before
  public void setUp() throws Exception {

    fileSystem = new FileSystem();
    InputHistory inputHistory = new InputHistory();

//    inputHistory.record("cd root");
//    inputHistory.record("man cd");
//    inputHistory.record("mkdir abc");
//    inputHistory.record("wrong");
//    inputHistory.record("ls");
    
    passed = new String[][] {{"history"},{"history", "1"}, 
      {"history", "2"}, {"history", "2"},};

    failed = new String[][] {{"history", "200"},
      {"history", "300"},{"history", "AA"}};

   
  }

  /**
   * Test if the instance can be successfully created.
   */
  @Test
  public void testHistoryViewer() {
    
    try {
      new InputHistory();
    } catch (Exception e) {
      fail("Failed to created the instance of command manual.");
    }
  }



  /**
   * Test if the method successfully set up or throw
   * exception in suitable cases.
   */
  @Test
  public void testSetUp() {

<<<<<<< .mine
    HistoryViewer historyViewer = new HistoryViewer(fileSystem);
    assertTrue(historyViewer.setUp({"history", "2"}, this.fileSystem));
    assertTrue(historyViewer.setUp({"history 2"}, fileSystem));
    assertTrue(historyViewer.setUp({"history 5"}, fileSystem));
=======
    // Test cases that should be passed
    try {
      for (String[] command : passed) {
        HistoryViewer viewer = new HistoryViewer();
        viewer.setUp(command, fileSystem);
      }
    } catch (Exception e) {
      fail("Unhandled exception have been thrown.");
    }
>>>>>>> .r555

<<<<<<< .mine
    assertFalse(historyViewer.setUp("history 6"));
    assertFalse(historyViewer.setUp("history -1"));
    assertFalse(historyViewer.setUp("history f"));
=======
    // Test cases that should be failed
    try {
      HistoryViewer viewer = new HistoryViewer();
      for (String[] command : failed) {
        viewer.setUp(command, fileSystem);
      }
      fail("Exception should be thrown.");
    } catch (Exception e) {
      // Empty catch statement
    }
>>>>>>> .r555
  }
    
    


  /**
   * Test if Execute method is working as expected.
   */
  @Test
  public void testExecute() {
    
  }
  
}

