// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package a2a.operator;

import a2a.exceptions.ArgumentDeclareException;
import a2a.exceptions.InvalidTargetNameException;
import a2a.exceptions.NameConflictException;
import a2a.exceptions.PathDoesNotExistException;
import a2a.foundation.Directory;
import a2a.foundation.FileSystem;

/**
 * The directory navigator uses to navigate the user transfer
 * from current directory to the target directory.
 *
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 * @author Yu Wang
 */
public class DirectoryNavigator implements Command {

  // Prepare for redirection if needed
  private FileEditor editor;
  private boolean isRedirectMode;

  // The file system uses to execute the command
  private FileSystem fileSystem;

  // The directory location which store the target
  private Directory targetDirLocation;

  // The name of the target directory
  private String targetDirectoryName;

  /**
   * Construct a DirectoryNavigator
   */
  public DirectoryNavigator() {

  }

  /**
   * Inspect the validity of the action which indicated
   * by user input, and set up the command before execute.
   *
   * @param command    The array of text entered by user
   * @param fileSystem The fileSystem which may be uses to execute command
   * @throws ArgumentDeclareException   if command have incorrect argument
   * @throws PathDoesNotExistException  if path is invalid
   * @throws NameConflictException      if name has been occupied
   * @throws InvalidTargetNameException if name contain invalid character
   */
  @Override public void setUp(String[] command, FileSystem fileSystem)
      throws ArgumentDeclareException, PathDoesNotExistException,
      NameConflictException, InvalidTargetNameException {

    if (command.length != 2 && command.length != 4) {
      throw new ArgumentDeclareException();
    }

    // Split the string path to a string array and search the target location
    ArgumentAnalyzer split = new ArgumentAnalyzer(command[1]);
    Searcher searcher = new Searcher(split.convert(), fileSystem);

    if (searcher.find() == null) {
      throw new PathDoesNotExistException(command[1]);
    }

    this.fileSystem = fileSystem;
    isRedirectMode = (command.length == 4);
    targetDirectoryName = split.convert()[split.convert().length - 1];
    targetDirLocation = searcher.find();

    if (isRedirectMode) {
      editor = new FileEditor(command, fileSystem);
    }
  }

  /**
   * Execute the command, then navigate the user
   * from current directory to target directory.
   */
  @Override public void execute() {

    if (isRedirectMode) {
      editor.write("");
    }

    switch (targetDirectoryName) {
      case ".":
        fileSystem.setCurrDir(targetDirLocation);
        break;
      case "..":
        fileSystem.setCurrDir(targetDirLocation.getParent());
        break;
      default:
        targetDirLocation.getContent().stream()
            .filter(item -> item instanceof Directory).filter(
            item -> ((Directory) item).getName().equals(targetDirectoryName))
            .forEach(item -> fileSystem.setCurrDir((Directory) item));
    }
  }

}
