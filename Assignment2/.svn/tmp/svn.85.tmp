// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package test;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;

import a2a.foundation.Directory;
import a2a.foundation.FileSystem;
import a2a.operator.DirectoryCreator;
import a2a.operator.DirectoryStackOperator;

/**
 * A directory stack operator, use to test if the methods are working as
 * expected.
 * 
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 * @author Yu Wang
 */
public class DirectoryStackOperatorTest {

  private FileSystem fileSystem;
  private DirectoryStackOperator operator;

  /**
   * Set up.
   */
  @Before
  public void SetUp() {
    fileSystem = new FileSystem();

    // Get root
    Directory root = fileSystem.getRoot();
    ArrayList<Object> contentOfRoot = root.getContent();

    // Create new directory
    Directory directoryAbc = new Directory("abc", "/abc", root);
    contentOfRoot.add(directoryAbc);

    // Update the root content
    root.setContent(contentOfRoot);

    // Update the root to file system
    fileSystem.setRoot(root);

  }

  /**
   * Test if the instance can be successfully created.
   */
  @Test
  public void testDirectoryStackOpeartor() {
    try {
      operator = new DirectoryStackOperator(fileSystem);
    } catch (Exception e) {
      fail("Failed to create an instance of directory stack operator.");
    }
  }

  /**
   * Test if the input command for the DirectoryStackOperator is valid or not.
   */
  @Test
  public void testIsValid() {
    DirectoryStackOperator operator = new DirectoryStackOperator(fileSystem);
    String userinput = "pushd abc";
    boolean output = operator.isValid(userinput);
    assertTrue(output);

  }

  /**
   * Test if the execute method works as expected.
   */
  @Test
  public void testExecute() {
    FileSystem afterExecuted = operator.execute();
    assertTrue(afterExecuted.getCurrDir().getName().equals("abc"));

  }

}


