// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: YI JIAN WANG
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package a2a.operator;

import a2a.exceptions.*;
import a2a.foundation.Directory;
import a2a.foundation.File;
import a2a.foundation.FileSystem;

/**
 * The ItemDuplicator uses to copy the item from original location
 * to the new location.
 *
 * @author Yi Jian Wang
 * @author Yu Ang Zhang
 */
public class ItemDuplicator implements Command {

  private boolean firstIsFile;
  private boolean secondExist;
  private boolean secondIsDir;

  private Searcher firstSearcher;
  private Searcher secondSearcher;
  private PathAnalyzer firstAnalyzer;
  private PathAnalyzer secondAnalyzer;

  /**
   * Construct an ItemDuplicator.
   */
  public ItemDuplicator() {

  }

  /**
   * Inspect the validity of the action which indicated by user input, and set
   * up the command before execute.
   *
   * @param fileSystem The file system use to execute this command
   * @throws PathDoesNotExistException  if path is invalid
   * @throws NameConflictException      if name has been occupied
   * @throws InvalidTargetNameException if name contain invalid character
   * @throws TypeNotMatchException      if the target's type is invalid
   * @throws ConflictPathException      if two paths conflict with each other
   * @throws ArgumentDeclareException   if the argument is wrongly declared
   */
  @Override public void setUp(String userInput, FileSystem fileSystem)
      throws InvalidTargetNameException, PathDoesNotExistException,
      NameConflictException, TypeNotMatchException, ConflictPathException,
      ArgumentDeclareException {

    String[] command = userInput.trim().split("\\s+");

    boolean isRedirectMode =
        (command.length == 5 && (command[3].equals(">>") || command[3]
            .equals(">")));
    if ((command.length != 3 && command.length != 5) || (command.length == 5
        && !isRedirectMode)) {
      throw new ArgumentDeclareException();
    }
    PathChecker checker = new PathChecker(fileSystem);

    boolean[] result = checker.inspectDoublePath(command[1], command[2]);
    this.firstIsFile = result[0];
    this.secondExist = result[1];
    this.secondIsDir = result[2];

    this.firstAnalyzer = new PathAnalyzer(command[1]);
    this.secondAnalyzer = new PathAnalyzer(command[2]);
    this.firstSearcher = new Searcher(firstAnalyzer.convert(), fileSystem);
    this.secondSearcher = new Searcher(secondAnalyzer.convert(), fileSystem);

    if (isRedirectMode)
      checker.inspectSinglePath(command[command.length - 1]);
  }

  /**
   * Execute the command, then allow user to copy directory with specific path
   * to certain path that is different from the original one.
   */
  @Override public void execute() {

    if (firstIsFile) {
      File origin = (File) firstSearcher.searchTarget(true);
      FileCreator creator = new FileCreator();

      if (secondExist && secondIsDir) {
        Directory newLocation = (Directory) secondSearcher.searchTarget(false);
        creator.create(origin.getName(), origin.getContents(), newLocation);

      } else if (secondExist) {
        File newFile = (File) secondSearcher.searchTarget(true);
        newFile.setContents(origin.getContents());

      } else {
        Directory newLocation = secondSearcher.searchLocation();
        creator.create(origin.getName(), origin.getContents(), newLocation);
      }

    } else {
      // First is Directory
      this.helpExecute();
    }
  }

  /**
   * This is helper uses to execute the command.
   */
  private void helpExecute() {

<<<<<<< .mine
    if (item instanceof File) {
      String result =
          ((File) item).getAddress().replaceFirst(original, newAddress);
      ((File) item).setAddress(result);
    } else if (item instanceof Directory) {
      String result =
          ((Directory) item).getAddress().replaceFirst(original, newAddress);
      ((Directory) item).setAddress(result);
      ((Directory) item).setParent(parent);;
      for (Object stuff : ((Directory) item).getContent()) {
        addressReplacer(stuff, ((Directory) item), original, newAddress);
      }
    }
  }
  /**
   * The execute method that handles case when the user moves an item to a
   * target location and the target location exists and is a valid path
   * 
   */
  private void firstDeepExecute() {
    // setting new address for target File
    // case when the user move one file into target directory
    // setting new address for target File
    PathAnalyzer analyzer = new PathAnalyzer(command[command.length - 2]);
    String newName = analyzer.convert()[analyzer.convert().length - 1];
    // generate new address
    String newAddress = targetDirectory.get(2).getAddress() + newName;
    // generate new directory object for move action
    File file = new File(newName, targetFile.get(0).getContents(), newAddress);
    addressChanger(file, targetDirectory.get(2), targetFile.get(0).getAddress(),
        newAddress, 0);
    targetDirectory.get(0).getContent().remove(targetFile.get(0));
    // if searchLocation and seachTarget are both root
    if (targetDirectory.get(2).equals(fileSystem.getRoot())) {
      targetDirectory.get(2).getContent().add(targetFile.get(0));
    }
    // checking duplicated file if target directory indicated,
    // if so, overwrite the file within the target directory
    System.out.println("haha");
    for (Object i : targetDirectory.get(2).getContent()) {
      if (i instanceof File && ((File) i).getName().equals(file.getName())) {
        targetDirectory.get(2).getContent().remove((File) i);
        break;
      }
    }
    targetDirectory.get(2).getContent().add(file);
  }
  /**
   * The execute method that handles case when the user moves an item but the
   * target location does not exist
   * 
   * 
   */
  private void secondDeepExecute() {
    if (targetFile.size() == 0) {
      // case when the target folder does not have the target directory
      // or overwriting directory
      PathAnalyzer analyzer = new PathAnalyzer(command[command.length - 1]);
      String newName = analyzer.convert()[analyzer.convert().length - 1];
      PathAnalyzer newanalyzer =
          new PathAnalyzer(targetDirectory.get(0).getAddress());
      String address = newanalyzer.convert()[newanalyzer.convert().length - 1];
      String newAddress =
          targetDirectory.get(0).getAddress().replace(address, newName);
      Directory dir =
          new Directory(newName, newAddress, targetDirectory.get(1));
      dir.setContent(targetDirectory.get(0).getContent());
      addressReplacer(dir, dir.getParent(), dir.getName(),
          newName);
      targetDirectory.get(1).getContent().add(dir);
    } else if (targetFile.size() > 0) {
      // case when the user overwrites a file
      this.overwritingFile();
=======
    // Select the new location
    Directory newLocation;
    if (secondExist && secondIsDir) {
      newLocation = (Directory) secondSearcher.searchTarget(false);
    } else {
      newLocation = secondSearcher.searchLocation();
>>>>>>> .r902
    }

    Directory origin = (Directory) firstSearcher.searchTarget(false);

<<<<<<< .mine
  private void overwritingFile() {
    
    PathAnalyzer analyzer = new PathAnalyzer(command[command.length - 2]);
    String newName = analyzer.convert()[analyzer.convert().length - 1];
    // generate new address
    String newAddress = targetDirectory.get(1).getAddress() + newName;
    // generate new directory object for move action
    File file = new File(newName, targetFile.get(0).getContents(), newAddress);
    addressChanger(file, targetDirectory.get(1), targetFile.get(0).getAddress(),
        newAddress, 0);
    targetDirectory.get(0).getContent().remove(targetFile.get(0));
    // if searchLocation and seachTarget are both root
    if (targetDirectory.get(1).equals(fileSystem.getRoot())) {
      targetDirectory.get(1).getContent().add(targetFile.get(0));
    }
    // checking duplicated file if target directory indicated,
    // if so, overwrite the file within the target directory
    for (Object i : targetDirectory.get(1).getContent()) {
      if (i instanceof File && ((File) i).getName().equals(file.getName())) {
        targetDirectory.get(1).getContent().remove((File) i);
        break;
      }
    }
    targetDirectory.get(1).getContent().add(file);
  }
=======
    String newName = origin.getName();
    String newAddress = newLocation.getAddress() + newName + "/";
    Directory newDirectory = new Directory(newName, newAddress, newLocation);
>>>>>>> .r902

<<<<<<< .mine
  /** A helper method for moving Directory to a target directory
   * 
   */
  private void movingDirectory() {
    // case when the user move one directory into target directory
    // execute new address for target Directory
    PathAnalyzer analyzer = new PathAnalyzer(command[command.length - 2]);
    String newName = analyzer.convert()[analyzer.convert().length - 1];
    // generate new address
    String newAddress = targetDirectory.get(2).getAddress() + newName + "/";
    // generate new directory object for move action
    Directory dir = new Directory(newName, newAddress, targetDirectory.get(2));
    Directory originalDir = new Directory(newName,
       targetDirectory.get(0).getAddress(), dir.getParent());
    dir.setContent(targetDirectory.get(0).getContent());
    originalDir.setContent(dir.getContent());
    addressChanger(dir, dir.getParent(), dir.getAddress(),
        newAddress, 0);
    targetDirectory.get(0).getParent().getContent()
        .remove(targetDirectory.get(0));
    targetDirectory.get(0).getParent().getContent()
    .add(originalDir);
    // overwrite directory if it is already existed
    for (Object i : targetDirectory.get(2).getContent()) {
      if (i instanceof Directory
          && (((Directory) i).getName().equals(dir.getName()))) {
        targetDirectory.get(2).getContent().remove((Directory) i);
        break;
      }
    }
    targetDirectory.get(2).getContent().add(dir);
=======
    // TODO: Use recursion to copy everything from origin content to this
    // TODO: New directory. Call a function right here.

    // After copy everything from the original content, add the new directory
    // into the new location.
    newLocation.getContent().add(newDirectory);
>>>>>>> .r902
  }

}
