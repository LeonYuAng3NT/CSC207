// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package a2a.foundation;

import java.util.ArrayList;
import java.util.List;

/**
 * The directory uses to store the files and other directories.
 * 
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 * @author Yu Wang
 */
public class Directory implements Cloneable{

  // The name of the directory
  private String name;

  // The address represents the full path of the directory
  private String address;

  // The content of the directory
  private List<Object> content;

  // The parent directory of this directory
  private Directory parent;

  /**
   * Construct a root directory.
   */
  public Directory() {

    name = "/";
    address = "/";
    parent = this;
    content = new ArrayList<>();
  }

  /**
   * Construct a directory which locate in the given parent directory.
   *
   * @param name    The name of this directory
   * @param address The full path of this directory
   * @param parent  The parent directory of this directory
   */
  public Directory(String name, String address, Directory parent) {

    this.name = name;
    this.address = address;
    this.parent = parent;
    content = new ArrayList<>();
  }

  /**
   * Return a string representation of the directory content.
   *
   * @return A string representation of this directory
   */
  public String toString() {

    String stat = "";

    for (Object item : content) {
      if (item instanceof File) {
        stat += ((File) item).getName() + "\n";
      } else if (item instanceof Directory) {
        stat += ((Directory) item).getName() + "\n";
      }
    }
    return stat;
  }

  /**
   * Get the name of this directory.
   *
   * @return The name of this directory
   */
  public String getName() {

    return name;
  }

  /**
   * Get the content of this directory.
   *
   * @return The content of this directory
   */
  public List<Object> getContent() {

    return content;
  }

  /**
   * Get the full path of this directory.
   *
   * @return The full path of this directory
   */
  public String getAddress() {

    return address;
  }

  /**
   * Get the parent directory of this directory.
   *
   * @return The parent directory of this directory
   */
  public Directory getParent() {

    return parent;
  }

  /**
   * Update the name of this directory.
   *
   * @param name The new name of this directory
   */
  public void setName(String name) {

    this.name = name;
  }

  /**
   * Update the address of this directory.
   *
   * @param address The new address of this directory
   */
  public void setAddress(String address) {

    this.address = address;
  }

  /**
   * Update the parent directory of this directory.
   *
   * @param parent The new parent directory of this directory
   */
  public void setParent(Directory parent) {

    this.parent = parent;
  }

  /**
   * Update the content of this directory.
   *
   * @param content The new content of this directory
   */
  public void setContent(List<Object> content) {

    this.content = content;
  }
  @Override
  protected Object clone() throws CloneNotSupportedException {
      return super.clone();
  }
}
