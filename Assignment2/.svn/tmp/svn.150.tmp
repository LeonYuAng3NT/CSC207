package a2a.operator;

import java.util.ArrayList;

import a2a.exceptions.ArgumentDeclareException;
import a2a.exceptions.InvalidTargetNameException;
import a2a.exceptions.NameConflictException;
import a2a.exceptions.PathDoesNotExistException;
import a2a.foundation.Directory;
import a2a.foundation.File;
import a2a.foundation.FileSystem;

public class ItemDuplicator implements Command{
    
    private FileSystem fileSystem;
    private ArrayList<String> targetNames;
    private ArrayList<Directory> targetLocation;
    /**
     * Inspect the validity of the action which indicated
     * by user input, and set up the command before execute.
     *
     * @param command    The array of text entered by user
     * @param fileSystem The fileSystem which may be uses to execute command
     * @throws ArgumentDeclareException   if the command have incorrect argument
     * @throws PathDoesNotExistException  if a path in this command is invalid
     * @throws NameConflictException      if output filename has been occupied
     * @throws InvalidTargetNameException if output file have invalid name
     */
    @Override public void setUp(String[] command, FileSystem fileSystem) throws 
     ArgumentDeclareException, PathDoesNotExistException,
     NameConflictException, InvalidTargetNameException {
      this.fileSystem = fileSystem;
      if (command.length > 1 && command.length == 3) {
          // Split and convert the user command to a string list
          Searcher searcher = new Searcher(command, this.fileSystem);

          // Parse the parent directory of the string at final index
          // to data stored in FileSystem
          Directory currTarget = (Directory) searcher.searchTarget(false);

          String currName = command[command.length-1];
          targetNames.add(currName);
          targetLocation.add(currTarget);
        }
     }  
    /**
     * Execute the command, then copy a directory or file with specific path
     * to another path
     */
    @Override  public void execute(){
      
      Directory target = new Directory();
      Directory oldLocation = targetLocation.get(0);
      Directory newLocation = targetLocation.get(1);

      for (int i = 0; i < oldLocation.getContent().size(); i++) {
        String targetName = targetNames.get(i);

        if (oldLocation.getContent().get(i) instanceof Directory) {
          Directory curr = (Directory) oldLocation.getContent().get(i);
          if (curr.getName().equals(targetName)) {
            // Get the target and remove it from original location
            target = (Directory) oldLocation.getContent().get(i);
            oldLocation.getContent().remove(i);
          }
        } else if (oldLocation.getContent().get(i) instanceof File) {
          File curr = (File) oldLocation.getContent().get(i);
          if (curr.getName().equals(targetName)) {
            // Get the target and remove it from original location
            target = (Directory) oldLocation.getContent().get(i);
          }
        }
      }
      for (int j = 0; j < newLocation.getContent().size(); j++) {
        if (oldLocation.getContent().get(j) instanceof Directory) {
          if (((Directory) ((Directory) targetLocation.get(1)).getContent()
              .get(j)).getName().equals(targetNames.get(j))) {
            ((Directory) ((Directory) targetLocation.get(1))
                .getContent().get(j))
                .getContent().add(target);
          }
        }
      }
    }
}
