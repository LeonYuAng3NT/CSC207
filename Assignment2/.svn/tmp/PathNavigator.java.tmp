package a2a.operator;

import a2a.exceptions.ArgumentDeclareException;
import a2a.exceptions.InvalidTargetNameException;
import a2a.exceptions.NameConflictException;
import a2a.exceptions.PathDoesNotExistException;
import a2a.foundation.Directory;
import a2a.foundation.File;
import a2a.foundation.FileSystem;

import java.util.ArrayList;

public class PathNavigator implements Command {

  private FileSystem fileSystem;
  private ArrayList<Directory> targetLocation;
  private ArrayList<String> targetNames;
  private boolean isRedirectMode;
  private FileEditor editor;

  /**
   *
   *
   * @param fileSystem The file system use to execute this command
   * @throws ArgumentDeclareException   if command have incorrect argument
   * @throws PathDoesNotExistException  if path is invalid
   * @throws NameConflictException      if name has been occupied
   * @throws InvalidTargetNameException if name contain invalid character
   */
  @Override public void setUp(String userInput, FileSystem fileSystem)
      throws ArgumentDeclareException, InvalidTargetNameException,
      PathDoesNotExistException, NameConflictException {
    if (isRedirectMode) {
       editor = new FileEditor(command,fileSystem);
    }
<<<<<<< .mine
      this.fileSystem = fileSystem;
      if (command.length > 1 && command.length == 3) {
          Searcher searcher = new Searcher(command,this.fileSystem);
          // Parse the parent directory of the string at final index
          // to data stored in FileSystem
          for(int i =1; i< command.length; i++){
            Directory currTarget = searcher.searchLocation();
            if(currTarget.equals(null)){
               throw new PathDoesNotExistException();
            }
            String currName = command[command.length - 1];
          if(currName.equals(null)){
            throw new InvalidTargetNameException(currName);
          }
          targetNames.add(currName);
          targetLocation.add(currTarget);
          if(targetNames.get(0) == targetNames.get(1)){
            throw new NameConflictException();
          }
        }
      }
=======
    this.fileSystem = fileSystem;
    String[] command = userInput.trim().split("\\s+");
    if (command.length > 1 && command.length == 3) {
      Searcher searcher = new Searcher(command, this.fileSystem);
      // Parse the parent directory of the string at final index
      // to data stored in FileSystem
      Directory currTarget = searcher.searchLocation();

      String currName = command[command.length - 1];
      targetNames.add(currName);
      targetLocation.add(currTarget);
    }
  }
>>>>>>> .r638
      else{ 
          throw new ArgumentDeclareException();
      }
   }

  /**
   * Execute the command, then allow user to move
   * directory with specific path to certain path that is different from the
   * original one
   */
  @Override public void execute() {

    Directory target = new Directory();
    Directory oldLocation = targetLocation.get(0);
    Directory newLocation = targetLocation.get(1);

    for (int i = 0; i < oldLocation.getContent().size(); i++) {
      String targetName = targetNames.get(i);

<<<<<<< .mine
        if (oldLocation.getContent().get(i) instanceof Directory) {
          Directory curr = (Directory) oldLocation.getContent().get(i);
          if (curr.getName().equals(targetName)) {
            // Get the target and remove it from original location
            target = (Directory) oldLocation.getContent().get(i);
            oldLocation.getContent().remove(i);
         }
        } else if (oldLocation.getContent().get(i) instanceof File) {
          File curr = (File) oldLocation.getContent().get(i);
          if (curr.getName().equals(targetName)) {
            // Get the target and remove it from original location
            target = (Directory) oldLocation.getContent().get(i);
            oldLocation.getContent().remove(i);
          }
=======
      if (oldLocation.getContent().get(i) instanceof Directory) {
        Directory curr = (Directory) oldLocation.getContent().get(i);
        if (curr.getName().equals(targetName)) {
          // Get the target and remove it from original location
          target = (Directory) oldLocation.getContent().get(i);
          oldLocation.getContent().remove(i);
        }
      } else if (oldLocation.getContent().get(i) instanceof File) {
        File curr = (File) oldLocation.getContent().get(i);
        if (curr.getName().equals(targetName)) {
          // Get the target and remove it from original location
          target = (Directory) oldLocation.getContent().get(i);
          oldLocation.getContent().remove(i);
>>>>>>> .r638
        }
      }
<<<<<<< .mine
      for (int j = 0; j < newLocation.getContent().size(); j++) {
        if (oldLocation.getContent().get(j) instanceof Directory) {
          if (((Directory) ((Directory) targetLocation.get(1)).getContent()
              .get(j)).getName().equals(targetNames.get(j))) {
            ((Directory) ((Directory) targetLocation.get(1)).getContent()
                .get(j))
                .getContent().add(target);
          }
=======
    }
    for (int j = 0; j < newLocation.getContent().size(); j++) {
      if (oldLocation.getContent().get(j) instanceof Directory) {
        if (((Directory) ((Directory) targetLocation.get(1)).getContent()
            .get(j)).getName().equals(targetNames.get(j))) {
          ((Directory) ((Directory) targetLocation.get(1)).getContent().get(j))
              .getContent().add(target);
>>>>>>> .r638
        }
      }
    }
<<<<<<< .mine
=======
  }


>>>>>>> .r638
}
