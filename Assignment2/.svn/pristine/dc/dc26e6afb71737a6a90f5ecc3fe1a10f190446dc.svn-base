// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************


package a2a.operator;

import a2a.exceptions.ConflictPathException;
import a2a.exceptions.InvalidTargetNameException;
import a2a.exceptions.NameConflictException;
import a2a.exceptions.PathDoesNotExistException;
import a2a.exceptions.TypeNotMatchException;
import a2a.foundation.Directory;
import a2a.foundation.File;
import a2a.foundation.FileSystem;

import java.util.ArrayList;
import java.util.List;

public class PathNavigator implements Command {

  private FileSystem fileSystem;
  private String[] command;
  private List<File> targetFile;
  private List<Directory> targetDirectory;
  private boolean isRedirectMode;

  public PathNavigator() {
    targetFile = new ArrayList<>();
    targetDirectory = new ArrayList<>();

  }

  /**
   *
   * Inspect the validity of the action which indicated by user input, and set
   * up the command before execute.
   *
   * @param fileSystem The file system use to execute this command
   * @throws PathDoesNotExistException if path is invalid
   * @throws NameConflictException if name has been occupied
   * @throws InvalidTargetNameException if name contain invalid character
   * @throws TypeNotMatchException if the target's type is invalid
   * @throws ConflictPathException if two paths conflict with each other
   * 
   * @author Yu Ang Zhang
   *
   * 
   */
  @Override
  public void setUp(String userInput, FileSystem fileSystem)
      throws InvalidTargetNameException, PathDoesNotExistException,
      NameConflictException, TypeNotMatchException, ConflictPathException {
    // TODO Auto-generated method stub
    command = userInput.trim().split("\\s+");
    this.fileSystem = fileSystem;
    this.isRedirectMode =
        (command.length >= 3 && (command[command.length - 2].equals(">>")
            || command[command.length - 2].equals(">")));

    PathChecker pathChecker = new PathChecker(this.fileSystem);
    boolean result = pathChecker.twoPathIsOccupied(command[1], command[2]);
    if (result == false) {
      // Throw Exception if one directory is the parent of target director
      throw new ConflictPathException();
    }
    // Setup and Check the first argument
    PathAnalyzer analyzer = new PathAnalyzer(command[1]);
    Searcher searcher = new Searcher(analyzer.convert(), fileSystem);
    this.firstDeepSetUp(searcher);
    // Setup and Check the second argument
    PathAnalyzer analyzer2 = new PathAnalyzer(command[2]);
    Searcher searcher2 = new Searcher(analyzer2.convert(), fileSystem);
    this.secondDeepSetUp(searcher2);
    if (isRedirectMode) {
      // operates RedirectMode
      PathChecker checker = new PathChecker(fileSystem);
      checker.inspectSinglePath(command[command.length - 1]);
    }
  }

  /**
   * This is a helper uses to continue set up the first argument of user's
   * command.
   *
   * @param searcher The searcher of current searching process
   * @throws PathDoesNotExistException throw exception if a path does not exist
   * @throws TypeNotMatchException throw exception if the target's type is
   *         invalid
   * 
   */
  private void firstDeepSetUp(Searcher searcher)
      throws PathDoesNotExistException, TypeNotMatchException {

    // Searcher cannot find anything
    boolean fileIsFound = searcher.searchTarget(true) != null;
    boolean dirIsFound = (searcher.searchTarget(false) != null);


    if (!fileIsFound && !dirIsFound) {
      throw new PathDoesNotExistException();

    } else if (fileIsFound) {
      // Path is a file
      this.targetFile.add((File) searcher.searchTarget(true));
      this.targetDirectory.add(searcher.searchLocation());

    } else {
      // Path is a directory
      this.targetDirectory.add((Directory) searcher.searchTarget(false));
    }
  }

  /**
   * This is a helper uses to continue set up the second argument of user's
   * command.
   *
   * @param searcher The searcher of current searching process
   * @throws PathDoesNotExistException throw exception if a path does not exist
   * @throws TypeNotMatchException throw exception if the target's type is
   *         invalid
   * @throws ConflictPathException throw exception if paths conflict with each
   *         other
   * 
   */
  private void secondDeepSetUp(Searcher searcher)
      throws PathDoesNotExistException, TypeNotMatchException,
      ConflictPathException {

    boolean locationIsFound = searcher.searchLocation() != null;
    // add target file's or directory's parent into the list
    targetDirectory.add(searcher.searchLocation());

    if (!locationIsFound) {
      // Searcher cannot find anything
      throw new PathDoesNotExistException();

    } else if (searcher.searchTarget(true) instanceof File) {
      // Second path is a file
      this.targetFile.add((File) searcher.searchTarget(true));
      // Throw Exception if two Files are not identical
      if (targetFile.size() == 2
          && !targetFile.get(0).getName().equals(targetFile.get(1).getName())) {
        throw new TypeNotMatchException();
      }
    } else if (searcher.searchTarget(false) instanceof Directory) {
      // Second path is a directory
      this.targetDirectory.add((Directory) searcher.searchTarget(false));
      // Throw Exception if two Directories are identical
      if (targetDirectory.size() == 3) {
        if (checkTwoPath(targetDirectory.get(2),targetDirectory.get(0)) 
            == false) {
          throw new ConflictPathException();
        }
      }
    }
  }
  
/**
 * 
 * @param firstDirectory
 * @param target
 * @return
 */
  private boolean checkTwoPath(Directory firstDirectory,
      Directory target) {
    boolean result = true;
    if(firstDirectory.equals(target) || 
    firstDirectory.getParent().equals(target)){
      return false;
    }
    for (Object item : firstDirectory.getParent().getContent()){     
      if (item instanceof Directory || ((Directory) item).equals(target)) {
        return false;
      }
      result =  checkTwoPath(firstDirectory.getParent(), target);
    }
    return result;
  }

  /**
   * Execute the command, then allow user to move directory with specific path
   * to certain path that is different from the original one
   * 
   * @author Yu Ang Zhang
   */
  @Override
  public void execute() {

    if (targetDirectory.size() == 3) {
      // case when the user move one directory into target directory
      targetDirectory.get(2).getContent().add(targetDirectory.get(0));
      targetDirectory.get(0).getParent().getContent()
          .remove((Directory) targetDirectory.get(0));
      if (targetFile.size() == 1) {
        // case when the user moves one file into the target directory
        targetDirectory.get(2).getContent().add(targetFile.get(0));
        targetDirectory.get(0).getContent().remove(targetFile.get(0));
      }
    } else if (targetDirectory.size() == 2) {
      if (targetFile.size() == 0) {
        // case when the target folder does not have the target directory
        targetDirectory.get(1).getContent().add(targetDirectory.get(0));
        targetDirectory.get(0).getParent().getContent()
            .remove((Directory) targetDirectory.get(0));
      } else if (targetDirectory.size() == 2 && targetFile.size() == 2) {
        // case when the user is overwritten the target file
        targetDirectory.get(1).getContent().remove(targetFile.get(1));
        targetDirectory.get(1).getContent().add(targetFile.get(0));
        targetDirectory.get(0).getContent().remove(targetFile.get(0));
      }
    }
  }
}
