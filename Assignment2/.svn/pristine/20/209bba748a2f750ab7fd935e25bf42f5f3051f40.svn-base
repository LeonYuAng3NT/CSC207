// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package test;

import static org.junit.Assert.*;

import java.util.List;

import org.junit.Before;
import org.junit.Test;

import a2a.foundation.Directory;
import a2a.foundation.File;
import a2a.foundation.FileSystem;
import a2a.operator.ItemDuplicator;
import a2a.operator.PathNavigator;

/**
 * An item duplicator test, use to test if the methods in the ItemDuplicator are
 * working as expected.
 * 
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 */
public class ItemDuplicatorTest {
  private ItemDuplicator duplicator;
  private FileSystem fileSystem;
  private String[] passed;
  private String[] failed;

  /**
   * Set up the ItemDuplicator test.
   */
  @Before
  public void setUp() {
    fileSystem = new FileSystem();
    Directory root = fileSystem.getRoot();
    // Initialization of
    Directory folder1 = new Directory("folder1", "/folder1/", root);
    Directory folder2 = new Directory("folder2", "/folder2/", root);
    Directory folder3 = new Directory("folder3", "/folder3/", root);
    Directory foldera = new Directory("foldera", "/folder1/foldera/", folder1);
    Directory folderb = new Directory("folderb", "/folder1/folderb/", folder1);
    File file = new File("file", "", "/folder1/file");
    fileSystem.getCurrDir().getContent().add(folder1);
    fileSystem.getCurrDir().getContent().add(folder2);
    fileSystem.getCurrDir().getContent().add(folder3);
    ((Directory) fileSystem.getCurrDir().getContent().get(0)).getContent()
        .add(foldera);
    ((Directory) fileSystem.getCurrDir().getContent().get(0)).getContent()
        .add(folderb);
    ((Directory) fileSystem.getCurrDir().getContent().get(0)).getContent()
        .add(file);
    passed = new String[] {"cp folder2 folder1/folder5", "cp folder2 folder3",
        "cp folder1/file folder2", "cp folder1/file folder3/file5"};
    failed = new String[] {"cp /folderb", "cp folder1 foldera",
        "cp folder1 file", "cp file1 file2"};
    this.duplicator = new ItemDuplicator();
  }

  /**
   * Test if the instance can be successfully created.
   */
  @Test
  public void testPathNavigator() {
    try {
      new PathNavigator();
    } catch (Exception e) {
      fail("Failed to create an instance of path navigator.");
    }
  }

  /**
   * Test if the method successfully set up or throw exception in suitable
   * cases.
   * 
   * @throws Exception
   */
  @Test
  public void testSetUp() throws Exception {

    try {
      PathNavigator pathNavigator = new PathNavigator();
      for (String command : passed) {
        pathNavigator.setUp(command, fileSystem);
      }

    } catch (Exception e) {
      fail("Unhandled exception have been thrown.");
    }

    // Test cases that should be failed
    try {
      PathNavigator pathNavigator = new PathNavigator();
      for (String command : failed) {
        pathNavigator.setUp(command, fileSystem);
      }
      fail("Exception should be thrown.");
    } catch (Exception e) {
      // Empty catch statement
    }
  }

  /**
   * Test if the execute method is working as expected.
   */
  @Test
  public void testExecute() {
    try {
      List<Object> rootContent = fileSystem.getCurrDir().getContent();
      assertEquals(3, fileSystem.getCurrDir().getContent().size());

      // case overwriting directory
      duplicator.setUp(passed[0], fileSystem);
      duplicator.execute();
      // check whether the directory has been copied
      assertTrue(((Directory) rootContent.get(0)).getContent().size() == 4);
      // check whether folder2 in root still exists
      assertTrue(((Directory) rootContent.get(1)).getContent().size() == 0);
      // check name and object type
      String name =
          ((Directory) ((Directory) rootContent.get(0)).getContent().get(3))
              .getName();
      assertEquals(name, "folder5");
      duplicator = new ItemDuplicator();

      // case for duplicate a folder
      duplicator.setUp(passed[1], fileSystem);
      duplicator.execute();
      // the directory folder 1 has been copied
      assertTrue(fileSystem.getCurrDir().getContent().size() == 4);
      // check whether folder 1 has been added to folder 3
      assertTrue(((Directory) rootContent.get(2)).getContent().size() == 1);
    } catch (Exception e) {
      fail("Unexpected exception have been thrown");
    }
  }


}


