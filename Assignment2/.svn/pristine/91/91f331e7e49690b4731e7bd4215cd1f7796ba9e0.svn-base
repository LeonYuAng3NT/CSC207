// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: YI JIAN WANG
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package a2a.operator;

import java.util.Arrays;
import java.util.regex.Pattern;


/**
 * An input command checker, it uses to check the format of a command.
 */
public class InputCommandChecker {

  private String[] command;

  /**
   * Construct an InputCommandChecker.
   */
  public InputCommandChecker(String userInput) {

    command = userInput.trim().split("\\s+");
  }

  /**
   * Check the format of an user input command.
   *
   * @return True if it is a valid command, false otherwise
   */
  public boolean isValid() {

    switch (command.length) {
      case 1:
        return Arrays.asList("ls", "history", "pwd", "popd")
            .contains(command[0]);
      case 2:
        return oneArgCommandIsValid(command);
      default:
        return otherTypeCommandIsValid(command);
    }
  }

  /**
   * This is a helper for method isValid.
   * Check the format of a command with one argument
   *
   * @param command The information of command
   * @return True if the command is valid
   */
  private boolean oneArgCommandIsValid(String[] command) {

    // Switch the command and check its argument
    switch (command[0]) {
      case "cd":
      case "pushd":
        return dirPathIsValid(command[1]);
      case "mkdir":
        return makeDirPathIsValid(command[1]);
      case "ls":
        return fileNameIsValid(command[1]) || filePathIsValid(command[1])
            || dirPathIsValid(command[1]);
      case "cat":
        return fileNameIsValid(command[1]) || filePathIsValid(command[1]);
      case "echo":
        return (command[1].startsWith("\"") && command[1].endsWith("\""));
      case "history":
        // Argument can only be an positive integer
        return Pattern.compile("[0-9]*").matcher(command[1]).matches();
      case "man":
        return Arrays
            .asList("ls", "pwd", "history", "popd", "mkdir", "cd", "pushd",
                "cat", "echo", "man", "exit").contains(command[1]);
      default:
        return false;
    }
  }

  /**
   * This is a helper for method isValid.
   * Check the command with two or more argument
   *
   * @param command The information of command
   * @return True if the command is valid
   */
  private boolean otherTypeCommandIsValid(String[] command) {

    // Check all the arguments of each command
    switch (command[0]) {
      case "mkdir":
        for (int i = 1; i < command.length; i++) {
          if (!makeDirPathIsValid(command[i])) {
            return false;
          }
        }
        return true;
      case "cat":
        for (int i = 1; i < command.length; i++) {
          if (!filePathIsValid(command[i]) && !fileNameIsValid(command[i])) {
            return false;
          }
        }
        // At most read two files at the same time
        return command.length <= 3;
      case "echo":
        return (command.length == 4 &&
            (command[1].startsWith("\"") && command[1].endsWith("\"")) &&
            (command[2].equals(">") || command[2].equals(">>")) &&
            (fileNameIsValid(command[3]) || filePathIsValid(command[3])));
      default:
        return false;
    }
  }

  /**
   * This is a helper, check the format of a filename.
   * <p>
   * A valid filename may contain at most one dot,
   * and its name should be alphabetic or digit only.
   *
   * @param argument The argument which contain the filename
   * @return True if the file name is in valid format
   */
  private boolean fileNameIsValid(String argument) {

    int dotOccurrence = 0;

    // The filename cannot start with or end with dot
    if (argument.startsWith(".") || argument.endsWith(".")) {
      return false;

    } else {
      // Check if the filename have other special character
      for (int i = 0; i < argument.length(); i++) {
        char ch = argument.charAt(i);
        if (ch == '.') {
          dotOccurrence++;
        } else if (!Character.isAlphabetic(ch) && !Character.isDigit(ch)) {
          return false;
        }
      }
    }
    // The only allowed character is one dot
    return dotOccurrence <= 1;
  }

  /**
   * This is a helper, check the format of the file path.
   * <p>
   * A valid format of a file may contains special directory names such as
   * "." or "..", and alphabetic or digit character only, except the name at
   * the last of the argument.
   * <p>
   * The name at the last of the argument is the name of the file, it should
   * contain at most one dot and alphabetic or digit character only.
   *
   * @param argument The full path of a file
   * @return True if the argument is valid, false otherwise
   */
  private boolean filePathIsValid(String argument) {

    // Split the path into an array
    ArgumentAnalyzer analyzer = new ArgumentAnalyzer(argument);
    String[] path = analyzer.convert();

    for (int i = 0; i < path.length; i++) {
      boolean isRoot = (path[i].equals("/") && (i == 0));

      if (isRoot) {
        continue;
      }

      if (i != path.length - 1 && !dirPathIsValid(path[i])) {
        return false;

      } else if (i == path.length - 1 && !fileNameIsValid(path[i])) {
        return false;
      }

    } return true;
  }

  /**
   * This is a helper, check the format of a full path.
   * <p>
   * A valid format of a directory path may contain special directory name
   * such as "." or "..", alphabetic character or digit character only.
   *
   * @param argument The full path of a directory
   * @return True if the directory path is in valid format, false otherwise
   */
  private boolean dirPathIsValid(String argument) {

    // Split the path into an array
    ArgumentAnalyzer analyzer = new ArgumentAnalyzer(argument);
    String[] path = analyzer.convert();

    for (int i = 0; i < path.length; i++) {
      String dirName = path[i];
      boolean isRoot = (dirName.equals("/") && (i == 0));

      if (isRoot || (path[i].equals(".") || dirName.equals(".."))) {
        continue;
      }

      if (dirName.equals("")) {
        return false;
      } else {
        // Use regex to check the name have alphabetic or digit character only
        Pattern allowedChars = Pattern.compile("^[a-z0-9A-Z\u4e00-\u9fa5]+$");
        if (!allowedChars.matcher(dirName).matches()) {
          return false;
        }
      }
    }
    // Ensure that the path is not empty
    return path.length >= 1;
  }

  /**
   * This is a helper, check the format of a path which will be used to
   * make a new directory.
   * <p>
   * A valid format of a path used to make a directory may contain special
   * directory name such as "." or "..", and alphabetic or digit character
   * only, except the directory name at the last of the path.
   * <p>
   * The name at the last will be the name of the new directory, it should
   * contain alphabetic or digit character only.
   *
   * @param argument The full path or the name of the new directory
   * @return True if the argument is valid, false otherwise
   */
  private boolean makeDirPathIsValid(String argument) {

    // Split the path into an array
    ArgumentAnalyzer analyzer = new ArgumentAnalyzer(argument);
    String[] path = analyzer.convert();

    for (int i = 0; i < path.length; i++) {
      String dirName = path[i];
      boolean isRoot = (dirName.equals("/") && (i == 0));
      boolean isSpecDirName = (dirName.equals(".") || dirName.equals(".."));

      // Root or the special directory name before the last of the path
      if (isRoot || (isSpecDirName && i != path.length - 1)) {
        continue;
      }
      // Empty directory name in path
      if (dirName.equals("")) {
        return false;
      } else {
        // Use regex to check the name have alphabetic or digit character only
        Pattern allowedChars = Pattern.compile("^[a-z0-9A-Z\u4e00-\u9fa5]+$");
        if (!allowedChars.matcher(dirName).matches()) {
          return false;
        }
      }
    }
    // Ensure that the path is not empty
    return path.length >= 1;
  }

}
