// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package a2a.operator;

import a2a.exceptions.ArgumentDeclareException;
import a2a.exceptions.InvalidTargetNameException;
import a2a.exceptions.NameConflictException;
import a2a.exceptions.PathDoesNotExistException;
import a2a.foundation.Directory;
import a2a.foundation.FileSystem;

import java.util.ArrayList;
import java.util.List;

/**
 * A directory creator that is used to create a directory,
 * check if the command for the DirectoryCreator is valid or not.
 *
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 * @author Yu Wang
 */
public class DirectoryCreator implements Command {

  // Stores the target location directories
  private List<Directory> targetLocations;

  // Store the name of new directories
  private List<String> newDirectoryNames;

  /**
   * Construct a DirectoryCreator
   */
  public DirectoryCreator() {

    newDirectoryNames = new ArrayList<>();
    targetLocations = new ArrayList<>();
  }

  /**
   * This is a helper uses to check the command
   * contain the same path or not.
   *
   * @param paths The multiple address of path
   * @return True if path contain same address
   */
  private boolean hasSamePath(String[] paths) {

    // Check the path does not contain same path
    for (int i = 1; i < paths.length; i++) {
      int counter = 0;
      for (int j = 1; j < paths.length; j++) {
        if (paths[i].equals(paths[j])) {
          counter++;
        }
      }
      if (counter > 1) {
        return true;
      }
    }
    return false;
  }

  /**
   * Inspect the validity of the action which indicated
   * by user input, and set up the command before execute.
   *
   * @param userInput  The text entered by user
   * @param fileSystem The fileSystem which may be uses to execute command
   * @throws ArgumentDeclareException   if the command have incorrect argument
   * @throws PathDoesNotExistException  if a path in this command is invalid
   * @throws NameConflictException      if output filename has been occupied
   * @throws InvalidTargetNameException if output file have invalid name
   */
  @Override public void setUp(String userInput, FileSystem fileSystem)
      throws ArgumentDeclareException, InvalidTargetNameException,
      PathDoesNotExistException, NameConflictException {

    String[] command = userInput.trim().split("\\s+");
    PathChecker checker = new PathChecker(fileSystem);

    // Check the argument
    if (command.length == 1 || hasSamePath(command)) {
      throw new ArgumentDeclareException();
    }

    // Redirection mode
    int endIndex = command.length;
    if (command[command.length - 2].equals(">") || command[command.length - 2]
        .equals(">>")) {
      endIndex = command.length - 2;
      checker.inspectSinglePath(command[command.length - 1]);
    }

    // Start make directories
    for (int i = 1; i < endIndex; i++) {
      PathAnalyzer analyzer = new PathAnalyzer(command[i]);
      Searcher searcher = new Searcher(analyzer.convert(), fileSystem);
      String newName = analyzer.convert()[analyzer.convert().length - 1];

      checker.inspectSinglePath(command[i]);
      newDirectoryNames.add(newName);
      targetLocations.add(searcher.searchLocation());
    }
  }

  /**
   * Execute the command, then start make directories.
   */
  @Override public void execute() {

    for (int i = 0; i < newDirectoryNames.size(); i++) {
      // The location of new directory
      Directory location = targetLocations.get(i);

      String newDirName = newDirectoryNames.get(i);
      String newAddress = location.getAddress() + newDirName + "/";
      Directory newDirectory = new Directory(newDirName, newAddress, location);
      location.getContent().add(newDirectory);
    }
  }
}
