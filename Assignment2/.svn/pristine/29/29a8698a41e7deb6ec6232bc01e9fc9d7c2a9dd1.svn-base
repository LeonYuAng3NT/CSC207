// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************


package a2a.operator;

import a2a.exceptions.InvalidTargetNameException;
import a2a.exceptions.NameConflictException;
import a2a.exceptions.PathDoesNotExistException;
import a2a.exceptions.TypeNotMatchException;
import a2a.foundation.Directory;
import a2a.foundation.File;
import a2a.foundation.FileSystem;

import java.util.ArrayList;
import java.util.List;

public class PathNavigator implements Command {

  private FileSystem fileSystem;
  private String[] command;
  private List<File> targetFile;
  private List<Directory> targetDirectory;
  private boolean isRedirectMode;

   public PathNavigator(){
     targetFile = new ArrayList<>();
     targetDirectory = new ArrayList<>();
     
   }
  /**
   *
   *
   * @param fileSystem The file system use to execute this command
   * @throws PathDoesNotExistException if path is invalid
   * @throws NameConflictException if name has been occupied
   * @throws InvalidTargetNameException if name contain invalid character
   * @throws TypeNotMatchException  if the target's type is invalid
   * 
   * @author Yu Ang Zhang
   * 
   */
  @Override
  public void setUp(String userInput, FileSystem fileSystem)
      throws InvalidTargetNameException, PathDoesNotExistException,
      NameConflictException, TypeNotMatchException {
    // TODO Auto-generated method stub
    String[] command = userInput.trim().split("\\s+");
    this.fileSystem = fileSystem;
    this.isRedirectMode =
        (command.length >= 3 && (command[command.length-2].equals(">>")
            || command[command.length-2].equals(">")));
    
 //   int startIndex = 0;
   // int endIndex = command.length;
 
    // Parse the parent directory of the string at final index
    // to data stored in FileSystem
    if (isRedirectMode) {
      PathChecker checker = new PathChecker(fileSystem);
      checker.inspectSinglePath(command[command.length - 1]);
    }
   // startIndex = 1;
    PathAnalyzer analyzer = new PathAnalyzer(command[2]);
    Searcher searcher = new Searcher(analyzer.convert(), fileSystem);
    this.deepSetUp(searcher);
   
      PathAnalyzer analyzer2 = new PathAnalyzer(command[1]);
      Searcher searcher2 = new Searcher(analyzer2.convert(), fileSystem);
      this.deepSetUp(searcher2);
      
    }

  /**
   * This is a helper uses to continue set up the command.
   *
   * @param searcher The searcher of current searching process
   * @throws PathDoesNotExistException  throw exception if a path does not exist
   * @throws TypeNotMatchException throw exception if the target's type 
   *  is invalid 
   * 
   */
  private void deepSetUp(Searcher searcher) throws PathDoesNotExistException,
     TypeNotMatchException{

    // Searcher cannot find anything
    boolean fileIsFound = searcher.searchTarget(true) != null;
    boolean dirIsFound = (searcher.searchTarget(false) != null);


    if (!fileIsFound && !dirIsFound) {
      throw new PathDoesNotExistException();

    } else if (fileIsFound) {
      // Path is a file
      this.targetFile.add((File)searcher.searchTarget(true));
      if( targetFile.size() != 2 && 
          !targetFile.get(0).equals(targetFile.get(1))){
        throw new TypeNotMatchException();
      }
      this.targetDirectory.add( searcher.searchLocation());    

    } else {
      // Path is a directory   
      this.targetDirectory.add((Directory)searcher.searchTarget(false));
    }
  }

  /**
   * Execute the command, then allow user to move directory with specific path
   * to certain path that is different from the original one
   * 
   * @author Yu Ang Zhang
   */
  @Override
  public void execute() {

    if (targetDirectory.size() == 2) {
      targetDirectory.get(1).getContent().add(targetDirectory.get(0));
      targetDirectory.get(0).getParent().getContent()
          .remove((Directory) targetDirectory.get(0));
    }
    else if (targetFile.size() == 2){
      
    }
    else {
      targetDirectory.get(1).getContent().add(targetFile.get(0));
      targetDirectory.get(0).getContent().remove(targetFile.get(0));
    }
  }
}
