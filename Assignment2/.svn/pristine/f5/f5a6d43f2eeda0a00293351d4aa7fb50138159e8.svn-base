// **********************************************************
// Assignment2:

// Student1:
// CDF user_name: c5zhanim
// UT Student #: 1001322847
// Author: Yu Ang Zhang
//
// Student2:
// CDF user_name: c4huanhf
// UT Student #: 1000076927
// Author: Yiming Huang
//

// Student3:
// CDF user_name: c4wangyk
// UT Student #: 999980579
// Author: Yi Jian Wang
//
// Student4:
// CDF user_name: c4wangzd
// UT Student #: 1001282319
// Author: Yu Wang
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC 207 and understand the consequences.
// *********************************************************
package a2a.operator;

import a2a.foundation.Directory;
import a2a.foundation.FileSystem;

/**
 * A Searcher, it uses to search the location of a file or directory.
 *
 * @author Yu Ang Zhang
 * @author Yiming Huang
 * @author Yi Jian Wang
 * @author Yu Wang
 */
public class Searcher {

  private String[] path;
  private FileSystem fileSystem;

  /**
   * Construct a Searcher.
   *
   * @param userInput  The string of a name or a path
   * @param fileSystem The file system which uses to search the target
   */
  public Searcher(String userInput, FileSystem fileSystem) {

    this.fileSystem = fileSystem;

    if (userInput.equals("/")) {
      path = new String[1];
      path[0] = "/";

    } else {
      path = userInput.trim().split("/");
      if (path.length != 0) {
        if (path[0].equals("")) {
          path[0] = "/";
        }
      }
    }
  }

  /**
   * Find the directory which contain the target.
   *
   * @return The location directory of target or null if it does not exist
   */
  public Directory find() {

    switch (path.length) {
      case 0:
        return null;
      case 1:
        if (path[0].equals("/")) {
          return fileSystem.getRoot();
        } else {
          return fileSystem.getCurrDir();
        }
      default:
        Directory curr = fileSystem.getCurrDir();
        boolean check = this.checker(curr);
        if(check){
          return null;
        }
        return curr;
    }
  }
 private boolean checker(Directory curr){
   for (int i = 0; i < path.length - 1; i++) {
     String name = path[i];

     // Except root directory, other directories cannot be root name
     if (name.equals("/") && i != 0) {
       return false;
     } else if (name.equals("/") && i == 0) {
       curr = fileSystem.getRoot();
     } else if (name.equals("..")) {
       curr = curr.getParent();
     } else if (!name.equals(".")) {
       boolean isNotFound = true;
       for (Object item : curr.getContent()) {
         if (item instanceof Directory) {
           Directory target = (Directory) item;
           if (target.getName().equals(name)) {
             curr = target;
             isNotFound = false;
             return isNotFound;
           }
         }
       }
     }
   }
   return true;
  }
}